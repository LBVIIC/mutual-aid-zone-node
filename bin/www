#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('demo:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
// app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app.callback());
const io = require('socket.io')(server, { cors: true });
const ChatController = require('../controller/ChatController');
const onlineMap = new Map();
io.on('connection', (socket) => {
  // 1.用户上线，记录用户ID及Socket ID
  const sender = socket.handshake.query.sender;
  onlineMap.set(sender, socket.id);

  // 2.收到前端发送的消息
  socket.on('chat', (message) => {
    // 如果用户在线，实时接受消息
    if (onlineMap.has(message.receiver)) {
      socket.to(onlineMap.get(message.receiver)).emit('chat', message);
    }

    // TODO：存入数据库
    ChatController.createChat(message);
  });

  // 3.用户下线
  socket.on('disconnect', () => {
    // 下线时，移除Socket ID
    onlineMap.forEach((value, key) => {
      if (socket.id === value) {
        onlineMap.delete(key);
      }
    });
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
